{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Prose",
  "scopeName": "source.prose",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#declarations"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.prose",
          "match": "#.*"
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "meta.declaration.constant.prose",
          "match": "(?i)\\b(create)\\s+(integer|rational|string|boolean|list)\\s+(constant)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type.create.prose" },
            "2": { "name": "support.type.prose" },
            "3": { "name": "storage.modifier.constant.prose" },
            "4": { "name": "variable.other.constant.declaration.prose" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.prose",
          "match": "\\b(if|then|else|elif|while|do|for|in|end|return|function)\\b"
        },
        {
          "name": "storage.type.prose",
          "match": "\\b(create|set|to|read|readme|write|writeln)\\b"
        },
        {
          "name": "storage.modifier.prose",
          "match": "\\b(variable)\\b"
        },
        {
          "name": "support.type.prose",
          "match": "\\b(integer|rational|string|boolean|list|type)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.prose",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.prose",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.prose",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.prose",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.prose",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.prose",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.prose",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\()"
        }
      ]
    }
  }
}
