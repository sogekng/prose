{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Prose",
  "scopeName": "source.prose",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#type_definitions"
    },
    {
      "include": "#function_declarations"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#function_calls"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.prose",
          "match": "#.*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.prose",
          "match": "\\b(if|then|else|elif|while|do|for|in|end|return)\\b"
        },
        {
          "name": "keyword.other.prose",
          "match": "\\b(create|set|to|read|readme|write|writeln)\\b"
        },
        {
          "name": "storage.type.function.prose",
          "match": "\\b(function)\\b"
        },
        {
          "name": "storage.modifier.prose",
          "match": "\\b(variable|constant)\\b"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "comment": "Matches 'from module import name1, name2'",
          "begin": "^\\s*\\b(from)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+\\b(import)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.control.import.prose" },
            "2": { "name": "entity.name.namespace.prose" },
            "3": { "name": "keyword.control.import.prose" }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "name": "variable.other.imported.prose",
              "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
            }
          ]
        },
        {
          "comment": "Matches 'import module'",
          "match": "^\\s*\\b(import)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.control.import.prose" },
            "2": { "name": "entity.name.namespace.prose" }
          }
        }
      ]
    },
    "type_definitions": {
      "patterns": [
        {
          "name": "meta.declaration.struct.prose",
          "match": "\\b(create)\\s+(type)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.other.prose" },
            "2": { "name": "storage.type.prose" },
            "3": { "name": "entity.name.type.struct.prose" }
          }
        }
      ]
    },
    "function_declarations": {
      "patterns": [
        {
          "name": "meta.declaration.function.prose",
          "match": "\\b(function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()",
          "captures": {
            "1": { "name": "storage.type.function.prose" },
            "2": { "name": "entity.name.function.prose" }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.builtin.prose",
          "match": "\\b(integer|rational|string|boolean|list|void)\\b"
        },
        {
          "comment": "Matches user-defined types (PascalCase convention)",
          "name": "entity.name.type.user-defined.prose",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.prose",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.prose",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.prose",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.prose",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.prose",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "name": "entity.name.function.call.prose",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.prose",
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\b"
        }
      ]
    }
  }
}
